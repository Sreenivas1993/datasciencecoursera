print("HelloWorld")
local({fn<-choose.files(filters=Filters[c('R','txt','All'),],index=4)
file.show(fn,header=fn,title='')})
q()
find.package("devtools")
install.packages(devtools)
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
rnorm
install.packages("swirl")
packageVersion("swirl")
install_from_swirl("R Programming")
install_from_swirl("R Programming")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
z
10.05 10.81 10.26
10 10 10
info()
sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files())
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
ls.files()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
?file.rename
file.rename("mytest.R","mytest2.R")
?file.copy
file.copy
file.copy('mytest2.R','mytest3.R')
?file.path
file.path(b,',')
file.path(getwd())
file.path("mytest3.R")
rtr
,,
file.path("mytest3.R",folder1,folder2)
file.path()
file.path("folder1","folder2")
dir.create("testdir",recursive = TRUE)
?dir.create
dir.create("testdir")
dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
setwd('old.dir')
setwd("old.dir")
setwd(old.dir)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
seq(1,length(my_seq))
1:length(my_seq)
seq(along.with=my_seq)
seq_alomg(my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect=c(0.5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect[num_vect<1]
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse =" ")
my_name<-c(my_char,"Sreenivas")
my_name
paste(my_name,collapse = " ")
paste(("hello","world!",sep=" ")
paste("hello","world!",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my-na
my_na
my_data==NA
sum(is.na(my_na))
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
?names
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(data=1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill,"Gina","Kelly","Sean")
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
library(swirl)
swirl()
TRUE==TRUE
(FALSE==TRUE)==FLASE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
!
!(5==7)
!5==7
FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
intts<-sample(10)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
len<-length(my_vector)
sumno<-sum(my_vector)
mea<-sumno/len
mea
}
my_mean <- function(my_vector) {
len<-length(my_vector)
sumno<-sum(my_vector)
mea<-sumno/len
mea
}
my_mean(c(3,4,5))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
submit()
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){last<-length(x)},c(8,4,0))
evaluate(function(x){last<-length(x) x[last]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
padte("Programming","is","fun")
paste("Programming","is","fun")
paste("Programming","is","fun!")
submit()
submit()
telegram(Sreenivas)
telegram("Sreenivas")
submit()
submit()
mad_libs("pala","asd","klj")
submit()
x<-"I"%p%"love"
"I"%p%"love%pR!"
"I"%p%"love"%p"R!"
"I"%p%"love""%p"R!"
"I" %p% "love" %p "R!"
'I' %p% 'love' %p 'R!'
"I" %p% "love"
"I" %p% "love" %p% "R!"
swirl()
>swirl()
swirl()
library(swirl)
swirl()
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.Date())
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-strptime("October 17, 1986 08:24")
t3<-"October 17, 1986 08:24"
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
cube<-function(x,n)
{}
difftime(Sys.time(),t1,units='days');sass
cube<-function(x,n)
{
x^3
}
cube(3)
x<-1:10
if(x>5)
{
x<-0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
y <- if(x < 3) {
NA
} else {
10
}
y
x
x<3
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x
y
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head()
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data("iris")
?iris
iriss
iris
tapply(iris$Sepal.Length,iris$Species,mean)
colMeans(iris)
?apply
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
?apply
class(iris[,1:4])
library(datasets)
data(mtcars)
mtcars
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429-82.63636
?with
with(mtcars, tapply(mpg, cyl, mean))
setwd("C:/Users/Sreenivas/Desktop/Courseera-Github/datasciencecoursera/Programming Assignment 2")
source(cachematrix.R)
setwd("C:/Users/Sreenivas/Desktop/Courseera-Github/datasciencecoursera/Programming Assignment 2")
source(cachematrix.R)
source(ProgrammingAssignment2/cachematrix.R)
makeCacheMatrix <- function(x = matrix()) {
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getinverse()
if(!is.null(inv)){
message("getting inverse of matrix")
return(inv)
}
data<-x$get()
x$setinverse(inv)
inv
}
source("cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
my_matrix$getinverse()
my_matrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getinverse()
if(!is.null(inv)){
message("getting inverse of matrix")
return(inv)
}
data<-x$get()
x$setinverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getinverse()
if(!is.null(inv)){
message("getting inverse of matrix")
return(inv)
}
matr<-x$get()
inv<-solve(matr,...)
x$setinverse(inv)
inv
}
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getinverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
my_matrix$getinverse()
cacheSolve(my_matrix)
my_matrix$getinverse()
